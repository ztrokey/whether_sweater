require 'rails_helper'

RSpec.describe Forecast do
  it 'creates a forecast object' do
    response = File.read('spec/fixtures/forecast/forecast_details.json')
    attributes = JSON.parse(response, symbolize_names: true)

    forecast_object = Forecast.new(attributes)

    expect(forecast_object).to be_a(Forecast)
    expect(forecast_object.id).to eq(nil)
    expect(forecast_object.current_weather).to be_a(Hash)
    expect(forecast_object.current_weather).to have_key(:datetime)
    expect(forecast_object.current_weather[:datetime]).to be_a(Time)
    expect(forecast_object.current_weather).to have_key(:sunrise)
    expect(forecast_object.current_weather[:sunrise]).to be_a(Time)
    expect(forecast_object.current_weather).to have_key(:sunset)
    expect(forecast_object.current_weather[:sunset]).to be_a(Time)
    expect(forecast_object.current_weather).to have_key(:temperature)
    expect(forecast_object.current_weather[:temperature]).to be_a(Float)
    expect(forecast_object.current_weather).to have_key(:feels_like)
    expect(forecast_object.current_weather[:feels_like]).to be_a(Float)
    expect(forecast_object.current_weather).to have_key(:humidity)
    expect(forecast_object.current_weather[:humidity]).to be_a(Integer)
    expect(forecast_object.current_weather).to have_key(:uvi)
    expect(forecast_object.current_weather[:uvi]).to be_a(Float)
    expect(forecast_object.current_weather).to have_key(:visibility)
    expect(forecast_object.current_weather[:visibility]).to be_a(Integer)
    expect(forecast_object.current_weather).to have_key(:conditions)
    expect(forecast_object.current_weather[:conditions]).to be_a(String)
    expect(forecast_object.current_weather).to have_key(:icon)
    expect(forecast_object.current_weather[:icon]).to be_a(String)

    expect(forecast_object.daily_weather).to be_an(Array)
    expect(forecast_object.daily_weather.count).to eq(5)
    expect(forecast_object.daily_weather.first).to be_a(Hash)
    expect(forecast_object.daily_weather.first).to have_key(:date)
    expect(forecast_object.daily_weather.first[:date]).to be_a(String)
    expect(forecast_object.daily_weather.first).to have_key(:sunrise)
    expect(forecast_object.daily_weather.first[:sunrise]).to be_a(Time)
    expect(forecast_object.daily_weather.first).to have_key(:sunset)
    expect(forecast_object.daily_weather.first[:sunset]).to be_a(Time)
    expect(forecast_object.daily_weather.first).to have_key(:max_temp)
    expect(forecast_object.daily_weather.first[:max_temp]).to be_a(Float)
    expect(forecast_object.daily_weather.first).to have_key(:min_temp)
    expect(forecast_object.daily_weather.first[:min_temp]).to be_a(Float)
    expect(forecast_object.daily_weather.first).to have_key(:conditions)
    expect(forecast_object.daily_weather.first[:conditions]).to be_a(String)
    expect(forecast_object.daily_weather.first).to have_key(:icon)
    expect(forecast_object.daily_weather.first[:icon]).to be_a(String)

    expect(forecast_object.hourly_weather).to be_an(Array)
    expect(forecast_object.hourly_weather.count).to eq(8)
    expect(forecast_object.hourly_weather.first).to be_a(Hash)
    expect(forecast_object.hourly_weather.first).to have_key(:time)
    expect(forecast_object.hourly_weather.first[:time]).to be_a(String)
    expect(forecast_object.hourly_weather.first).to have_key(:temperature)
    expect(forecast_object.hourly_weather.first[:temperature]).to be_a(Float)
    expect(forecast_object.hourly_weather.first).to have_key(:conditions)
    expect(forecast_object.hourly_weather.first[:conditions]).to be_a(String)
    expect(forecast_object.hourly_weather.first).to have_key(:icon)
    expect(forecast_object.hourly_weather.first[:icon]).to be_a(String)
  end
end
